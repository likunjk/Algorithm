#include<iostream>
using namespace std;


bool helper(int A[], int leftIndex, int rightIndex, int leftValue, int rightValue)
{
	if(leftIndex > rightIndex)	//数组不合法，直接返回TRUE，免去上层的判断
		return true;

	if(leftIndex == rightIndex)	//叶子节点
		return A[leftIndex] > leftValue && A[leftIndex] < rightValue;

	// 首先要判断当前层的根节点，因为等会会丢弃它
	if( !( A[leftIndex] > leftValue && A[leftIndex] < rightValue ) )
		return false;

	int L = leftIndex+1;
	int R = rightIndex;
	while(L <= R)
	{
		int mid = (L+R)/2;
		if(A[mid] < A[leftIndex])
			L = mid+1;
		else
		{	
			if(R!=mid)	// 当L==R时，这里可能会出错
				R = mid;
			else
				break;
		}
	}
	return helper(A, leftIndex+1, L-1, leftValue, A[leftIndex]) &&
		   helper(A, L, rightIndex, A[leftIndex], rightValue);
}

// 判断一个数组是否为一棵二叉搜索树的前序遍历结果，要求最坏事件复杂度为O(nlgn)
bool isLegalPreOrderOfBST(int A[], int n)
{
	return helper(A, 0, n-1, INT_MIN, INT_MAX);
}

// Hulu 2015 校园招聘 面试第2题
int main(void)
{
	int A[] = {7, 2, 20, 1, 8, 9, 10, 11};
	
	bool ans = isLegalPreOrderOfBST(A, sizeof(A)/sizeof(int));

	return 0;
}


